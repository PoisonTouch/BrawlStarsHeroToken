
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

// This is class that describes you smart contract.
contract HeroToken {
    // Contract can have an instance variables.
    // In this example instance variable `timestamp` is used to store the time of `constructor` or `touch`
    // function call
    
    struct Token {
        string name;
        uint attack;
        uint protection;
        uint practicality;
    }

    Token[] tokensArr;
    string[] names;// для проверки уникальности имени
    mapping (uint => uint) tokenToOwner;
    mapping (uint => uint) tokenPrice;//сопоставление айди токена и его цены


    function createToken(string name,uint attack,uint protection,uint practicality) public {
        tvm.accept();
        names.push(name);
        bool flag=true;
        for(uint i=0;i<names.length;i++){//цикл проверки имени токена на уникальность
            if(names[i]!=name)  {
                flag=true;
            }
            if(names[i]==name)  {
                flag=false;
                break;
            }
        }
        if (flag==true) tokensArr.push(Token(name,attack,protection,practicality));
        uint keyAsLastNum = tokensArr.length-1;
        tokenToOwner[keyAsLastNum] = msg.pubkey();
    }

    function getTokenOwner(uint tokenId) public view  returns(uint) {
        return tokenToOwner[tokenId];
    }

    function getTokenInfo(uint tokenId) public view returns(string tokenName,uint tokenAttack,uint tokenProtection,uint tokenPracticality) {
        // tvm.accept();
        tokenName=tokensArr[tokenId].name;
        tokenAttack=tokensArr[tokenId].attack;
        tokenProtection=tokensArr[tokenId].protection;
        tokenPracticality=tokensArr[tokenId].practicality;
    }

    function changeOwner(uint tokenId,uint pubKeyOfNewOwner) checkOwner(tokenId) public{
        tokenToOwner[tokenId] = pubKeyOfNewOwner;
    }

    function putForSale(uint tokenId,uint price) checkOwner(tokenId) public {
        tokenPrice[tokenId] = price;
    }

     modifier checkOwner(uint tokenId) { //модификатор для проверки на владельца при изменение владельца и выставлении на продажу
        require(msg.pubkey()==tokenToOwner[tokenId],101);
        tvm.accept();
        _;
    }

    // Contract can have a `constructor` – function that will be called when contract will be deployed to the blockchain.
    // In this example constructor adds current time to the instance variable.
    // All contracts need call tvm.accept(); for succeeded deploy
    constructor() public {
        // Check that contract's public key is set
        require(tvm.pubkey() != 0, 101);
        // Check that message has signature (msg.pubkey() is not zero) and
        // message is signed with the owner's private key
        require(msg.pubkey() == tvm.pubkey(), 102);
        // The current smart contract agrees to buy some gas to finish the
        // current transaction. This actions required to process external
        // messages, which bring no value (henceno gas) with themselves.
        tvm.accept();

        
    }

    
    

    
}
